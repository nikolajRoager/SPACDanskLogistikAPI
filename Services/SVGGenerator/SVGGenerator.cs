using DanskLogistikAPI.Repositories;
using Microsoft.AspNetCore.Mvc;
using System.Xml;

namespace DanskLogistikAPI.Services.SVGGenerator
{
    public class SVGGenerator(IMapRepository _mapRepository) : ISVGGenerator
    {
        IMapRepository mapRepository=_mapRepository;
        /// <summary>
        /// Get map as a string, which can be returned outright
        /// </summary>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public string GetMapString(/*Insert SVG arguments: Occupation, current position, current path*/)
        {
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// Overwrite the map database from an inkscape SVG (throw errors if any information is missing or corrupted)
        /// </summary>
        /// <param name="SVGData">Must be an INKSCAPE document obeying the detailedrequiremennts in the manual</param>
        /// <exception cref="NotImplementedException"></exception>
        public void LoadMapFromSVG(StreamReader SVGData)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Create an empty Xml Document, which is a valid SVG, and which has all the required Definitions in <defs />, this throws errors if the database does not contain the required SVG snippets
        /// </summary>
        /// <returns></returns>
        private async Task<XmlDocument> CreateEmptySvg()
        {
            //Thie header works well enough
            string HeaderAndRoot = $"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n"+
            $"<!--AUTOGENERATED municipality map -->\n"+
            $"<svg\n"+
            $"   width=\"318mm\"\n"+
            $"   height=\"234mm\"\n"+
            $"   viewBox=\"0 0 318 234\"\n"+
            $"   version=\"1.1\"\n"+
            $"   id=\"svg1\"\n"+
            $"   xmlns=\"http://www.w3.org/2000/svg\">\n"+
            $"   <defs id=\"defs1\"/>"+
            $"   <g id=\"layer0\"/>"+
            $"</svg>\n";
            XmlDocument Doc = new XmlDocument();
            Doc.LoadXml( HeaderAndRoot );


            XmlNamespaceManager nsmgr = new XmlNamespaceManager(Doc.NameTable);
            nsmgr.AddNamespace("ns", "http://www.w3.org/2000/svg");
            //Create defs, it is not null, i LITERALLY JUST CREATED IT
            var defs = Doc.SelectSingleNode("//ns:defs", nsmgr);
            if (defs == null)
                throw new Exception("Concratulations!, you are watching an error message, which I thought was 100% impossible to ever trigger: Somehow, the internal xml generator believes the <defs> element does not exist, 3 lines after generating it, that should never ever happe..");
            //Now load all the basic settings, and put them in defs, that allows us to refer back to them, without actually showing them in the svg:
            //Including them in defs might make small svgs a little bloated, but it will MASSIVELY reduce the size of large maps
            
            //Let us make a quick function for loading something from the database into the defs
            var addDef = async (string name) =>
            {
                var snippet = await mapRepository.GetSnippetAsync(name);

                if (snippet== null)
                    throw new Exception($"template svg snippet \"{name}\" was missing");
                XmlDocumentFragment fragment = Doc.CreateDocumentFragment();
                fragment.InnerXml = snippet.Content;
                defs.AppendChild(fragment);

            };

            //Wait for everything to be found and added, unfortunately the names are hardcoded

            //This does not work, the repository is not threading friendly
            //List<Task> addDefs = new List<Task> { addDef("occupationTemplate"), addDef("occupied"), addDef("background"), addDef("node"), addDef("airplane"), addDef("rail"),addDef("road"),addDef("sea")};
            //await Task.WhenAll(addDefs);
            await addDef("occupationTemplate");
            await addDef("occupied");
            await addDef("background");
            await addDef("node");
            await addDef("airplane");
            await addDef("rail");
            await addDef("road");
            await addDef("sea");

            return Doc;
        }
        
        /// <summary>
        /// Create a faux document around this string, which presumably is some kind of SVG element, using all required info in our database
        /// </summary>
        /// <returns>A string, with the xml data, it is a string for easy upload</returns>
        /// <exception cref="NotImplementedException"></exception>
        public async Task<string> CreateSingleDocument(string subject)
        {
            var Doc = await CreateEmptySvg();

            XmlNamespaceManager nsmgr = new XmlNamespaceManager(Doc.NameTable);
            nsmgr.AddNamespace("ns", "http://www.w3.org/2000/svg");

            var Layer0 = Doc.SelectSingleNode("//ns:g[@id=\"layer0\"]",nsmgr);
            

            XmlDocumentFragment fragment = Doc.CreateDocumentFragment();
            fragment.InnerXml = subject;

            Layer0.AppendChild(fragment);
            Doc.DocumentElement?.AppendChild(Layer0);

            return Doc.OuterXml;
        }
    }
}
